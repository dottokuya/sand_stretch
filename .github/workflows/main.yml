name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
    - cmake

  workflow_dispatch:

jobs:
  build:
    name: Build plugin on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - os: ubuntu-latest
            cmake_gen: -GNinja
            cmake_args: "-DCMAKE_CXX_COMPILER=g++-11"
          - os: windows-latest
            cmake_gen: -G"Ninja Multi-Config"
            cmake_args: -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl
          - os: macos-13
            cmake_args: "-DCMAKE_BUILD_TYPE=Release"
    
    steps:
    - name: Install Linux Deps
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt install wget libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev libjack-jackd2-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9

    - name: Set Xcode version
      if: runner.os == 'MacOS'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Add msbuild to PATH
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Setup MSVC devcmd
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Get latest CMake
      uses: lukka/get-cmake@latest

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure
      shell: bash
      run: cmake -Bbuild ${{ matrix.cmake_args }} ${{ matrix.cmake_gen }}

    - name: Build
      shell: bash
      run: cmake --build build --config Release --parallel 4

    - name: Prepare build artifacts (Win/Mac)
      shell: bash
      working-directory: build
      if: runner.os != 'Linux'
      run: |
        shopt -s extglob  # Enable bash extended globbing
        mkdir build-${{ runner.os }}
        mv *_artefacts/Release/@(VST3|AU)/*.@(vst3|component) build-${{ runner.os }}/

    - name: Prepare build artifacts (Linux)
      shell: bash
      working-directory: build
      if: runner.os == 'Linux'
      run: |
        shopt -s extglob  # Enable bash extended globbing
        mkdir build-${{ runner.os }}
        mv *_artefacts/VST3/*.vst3 build-${{ runner.os }}/
        
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ runner.os }}
        path: build/build-${{ runner.os }}
